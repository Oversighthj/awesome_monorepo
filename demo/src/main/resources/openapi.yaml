openapi: 3.0.3
info:
  title: Pilot-App API
  version: 1.0.0
  description: |
    Unified backend for Pilot-App (Spring Boot) + Flutter client.

servers:
  - url: http://localhost:8080/api
    description: Local dev

# 1) Tags
tags:
  - name: users
    description: عمليات إنشاء واستعلام المستخدمين
  - name: transport
    description: عمليات حجز النقل
  - name: bookings
    description: عمليات الحجز العامة (workspace, apartment, etc.)
  - name: payments
    description: عمليات الدفع (Stripe/PayPal)

# 2) Paths
paths:
  ## ─────────────── Users ───────────────
  /users:
    get:
      tags: [users]
      summary: List all users
      operationId: listUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        default:
          $ref: '#/components/responses/Error'

  /users/{id}:
    get:
      tags: [users]
      summary: Get user by id
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        default:
          $ref: '#/components/responses/Error'

  ## ──────────── Transport ──────────────
  /transport/book:
    post:
      tags: [transport]
      summary: Book a transport ride
      operationId: bookTransport
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransportBookingDTO'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransportBookingDTO'
        default:
          $ref: '#/components/responses/Error'

  ## ───────────── Booking ───────────────
  /bookings:
    post:
      tags: [bookings]
      summary: Create a new booking (workspace, apartment, etc.)
      operationId: createBooking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingDTO'
      responses:
        '201':
          description: Booking created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDTO'
        default:
          $ref: '#/components/responses/Error'
    get:
      tags: [bookings]
      summary: List bookings
      operationId: listBookings
      parameters:
        - name: userId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/BookingStatus'
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingDTO'
        default:
          $ref: '#/components/responses/Error'

  /bookings/{bookingId}:
    get:
      tags: [bookings]  
      summary: Get booking details
      operationId: getBooking
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Booking details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDTO'
        default:
          $ref: '#/components/responses/Error'

  ## ───────────── Payment ───────────────
  /payments/checkout:
    post:
      tags: [payments]
      summary: Initiate payment session (Stripe / PayPal)
      operationId: initiatePayment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequestDTO'
      responses:
        '200':
          description: Checkout session info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponseDTO'
        default:
          $ref: '#/components/responses/Error'

# 3) Components
components:
  schemas:

    ## ─── Global error schema (RFC 7807) ───
    ProblemDetail:
      type: object
      description: Standardised error format (RFC 7807)
      properties:
        type:
          type: string
          format: uri-reference
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
        instance:
          type: string
          format: uri-reference

    ## ─────────── Existing DTOs ───────────
    UserDTO:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        fullName:
          type: string
      required: [email, fullName]

    TransportBookingDTO:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        pickupAddress:
          type: string
        dropoffAddress:
          type: string
        scheduledAt:
          type: string
          format: date-time
        price:
          type: number
          format: double
      required: [userId, pickupAddress, dropoffAddress, scheduledAt, price]

    ## ─────────── Booking & Payment DTOs ───────────
    BookingDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 42
        userId:
          type: integer
          format: int64
          example: 1
        resourceId:
          type: integer
          format: int64
          description: Numeric identifier of the booked asset (room, apartment, vehicle …)
          example: 1001
        startTime:
          type: string
          format: date-time
          example: "2025-05-15T09:00:00Z"
        endTime:
          type: string
          format: date-time
          example: "2025-05-15T17:00:00Z"
        totalPrice:
          type: number
          format: double
          example: 199.99
        status:
          $ref: '#/components/schemas/BookingStatus'
        createdAt:
          type: string
          format: date-time
          readOnly: true
          example: "2025-05-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          example: "2025-05-01T12:00:00Z"
      required:
        - userId
        - resourceId
        - startTime
        - endTime
        - totalPrice

    BookingStatus:
      type: string
      enum: [PENDING, CONFIRMED, CANCELLED, PAID, EXPIRED]

    PaymentRequestDTO:
      type: object
      properties:
        bookingId:
          type: integer
          format: int64
        amount:
          type: number
          format: double
        currency:
          type: string
          example: "MYR"
        provider:
          type: string
          enum: [STRIPE, PAYPAL]
      required: [bookingId, amount, currency, provider]

    PaymentResponseDTO:
      type: object
      properties:
        checkoutUrl:
          type: string
          format: uri
        expiresAt:
          type: string
          format: date-time
        providerSessionId:
          type: string
      required: [checkoutUrl, providerSessionId]

  # ─── Shared responses ───
  responses:
    Error:
      description: Error response (RFC 7807)
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
