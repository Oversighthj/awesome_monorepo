/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demo.api;

import com.example.demo.model.BookingDTO;
import com.example.demo.model.BookingStatus;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-02T13:33:36.045281072+08:00[Asia/Kuala_Lumpur]")
@Validated
@Tag(name = "bookings", description = "the bookings API")
public interface BookingsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /bookings : Create a new booking (workspace, apartment, etc.)
     *
     * @param bookingDTO  (required)
     * @return Booking created (status code 201)
     */
    @Operation(
        operationId = "createBooking",
        summary = "Create a new booking (workspace, apartment, etc.)",
        responses = {
            @ApiResponse(responseCode = "201", description = "Booking created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookingDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/bookings",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BookingDTO> createBooking(
        @Parameter(name = "BookingDTO", description = "", required = true) @Valid @RequestBody BookingDTO bookingDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2025-05-01T12:00:00Z\", \"resourceId\" : \"ROOM-A1\", \"totalPrice\" : 199.99, \"startTime\" : \"2025-05-15T09:00:00Z\", \"id\" : 42, \"endTime\" : \"2025-05-15T17:00:00Z\", \"userId\" : 1, \"updatedAt\" : \"2025-05-01T12:00:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /bookings/{bookingId} : Get booking details
     *
     * @param bookingId  (required)
     * @return Booking details (status code 200)
     */
    @Operation(
        operationId = "getBooking",
        summary = "Get booking details",
        responses = {
            @ApiResponse(responseCode = "200", description = "Booking details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookingDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/bookings/{bookingId}",
        produces = { "application/json" }
    )
    default ResponseEntity<BookingDTO> getBooking(
        @Parameter(name = "bookingId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("bookingId") Integer bookingId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2025-05-01T12:00:00Z\", \"resourceId\" : \"ROOM-A1\", \"totalPrice\" : 199.99, \"startTime\" : \"2025-05-15T09:00:00Z\", \"id\" : 42, \"endTime\" : \"2025-05-15T17:00:00Z\", \"userId\" : 1, \"updatedAt\" : \"2025-05-01T12:00:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /bookings : List bookings
     *
     * @param userId  (optional)
     * @param status  (optional)
     * @return List of bookings (status code 200)
     */
    @Operation(
        operationId = "listBookings",
        summary = "List bookings",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of bookings", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BookingDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/bookings",
        produces = { "application/json" }
    )
    default ResponseEntity<List<BookingDTO>> listBookings(
        @Parameter(name = "userId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) Integer userId,
        @Parameter(name = "status", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) BookingStatus status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2025-05-01T12:00:00Z\", \"resourceId\" : \"ROOM-A1\", \"totalPrice\" : 199.99, \"startTime\" : \"2025-05-15T09:00:00Z\", \"id\" : 42, \"endTime\" : \"2025-05-15T17:00:00Z\", \"userId\" : 1, \"updatedAt\" : \"2025-05-01T12:00:00Z\" }, { \"createdAt\" : \"2025-05-01T12:00:00Z\", \"resourceId\" : \"ROOM-A1\", \"totalPrice\" : 199.99, \"startTime\" : \"2025-05-15T09:00:00Z\", \"id\" : 42, \"endTime\" : \"2025-05-15T17:00:00Z\", \"userId\" : 1, \"updatedAt\" : \"2025-05-01T12:00:00Z\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
